// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	rule "waffle/internal/rule"

	mock "github.com/stretchr/testify/mock"
)

// Builder is an autogenerated mock type for the Builder type
type Builder struct {
	mock.Mock
}

type Builder_Expecter struct {
	mock *mock.Mock
}

func (_m *Builder) EXPECT() *Builder_Expecter {
	return &Builder_Expecter{mock: &_m.Mock}
}

// Build provides a mock function with given fields: name, variable, expression
func (_m *Builder) Build(name string, variable string, expression string) (*rule.Predicate, error) {
	ret := _m.Called(name, variable, expression)

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 *rule.Predicate
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*rule.Predicate, error)); ok {
		return rf(name, variable, expression)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *rule.Predicate); ok {
		r0 = rf(name, variable, expression)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rule.Predicate)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(name, variable, expression)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Builder_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type Builder_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
//   - name string
//   - variable string
//   - expression string
func (_e *Builder_Expecter) Build(name interface{}, variable interface{}, expression interface{}) *Builder_Build_Call {
	return &Builder_Build_Call{Call: _e.mock.On("Build", name, variable, expression)}
}

func (_c *Builder_Build_Call) Run(run func(name string, variable string, expression string)) *Builder_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Builder_Build_Call) Return(_a0 *rule.Predicate, _a1 error) *Builder_Build_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Builder_Build_Call) RunAndReturn(run func(string, string, string) (*rule.Predicate, error)) *Builder_Build_Call {
	_c.Call.Return(run)
	return _c
}

// NewBuilder creates a new instance of Builder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *Builder {
	mock := &Builder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
