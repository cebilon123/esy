// Code generated by mockery v2.42.1. DO NOT EDIT.

package rule

import mock "github.com/stretchr/testify/mock"

// MockExpressionTreeFactory is an autogenerated mock type for the ExpressionTreeFactory type
type MockExpressionTreeFactory struct {
	mock.Mock
}

type MockExpressionTreeFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExpressionTreeFactory) EXPECT() *MockExpressionTreeFactory_Expecter {
	return &MockExpressionTreeFactory_Expecter{mock: &_m.Mock}
}

// CreateExpressionTree provides a mock function with given fields: tokens
func (_m *MockExpressionTreeFactory) CreateExpressionTree(tokens []Token) (expressionTree, error) {
	ret := _m.Called(tokens)

	if len(ret) == 0 {
		panic("no return value specified for CreateExpressionTree")
	}

	var r0 expressionTree
	var r1 error
	if rf, ok := ret.Get(0).(func([]Token) (expressionTree, error)); ok {
		return rf(tokens)
	}
	if rf, ok := ret.Get(0).(func([]Token) expressionTree); ok {
		r0 = rf(tokens)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(expressionTree)
		}
	}

	if rf, ok := ret.Get(1).(func([]Token) error); ok {
		r1 = rf(tokens)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExpressionTreeFactory_CreateExpressionTree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExpressionTree'
type MockExpressionTreeFactory_CreateExpressionTree_Call struct {
	*mock.Call
}

// CreateExpressionTree is a helper method to define mock.On call
//   - tokens []Token
func (_e *MockExpressionTreeFactory_Expecter) CreateExpressionTree(tokens interface{}) *MockExpressionTreeFactory_CreateExpressionTree_Call {
	return &MockExpressionTreeFactory_CreateExpressionTree_Call{Call: _e.mock.On("CreateExpressionTree", tokens)}
}

func (_c *MockExpressionTreeFactory_CreateExpressionTree_Call) Run(run func(tokens []Token)) *MockExpressionTreeFactory_CreateExpressionTree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]Token))
	})
	return _c
}

func (_c *MockExpressionTreeFactory_CreateExpressionTree_Call) Return(_a0 expressionTree, _a1 error) *MockExpressionTreeFactory_CreateExpressionTree_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExpressionTreeFactory_CreateExpressionTree_Call) RunAndReturn(run func([]Token) (expressionTree, error)) *MockExpressionTreeFactory_CreateExpressionTree_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExpressionTreeFactory creates a new instance of MockExpressionTreeFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExpressionTreeFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExpressionTreeFactory {
	mock := &MockExpressionTreeFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
