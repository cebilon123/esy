// Code generated by mockery v2.42.1. DO NOT EDIT.

package rule

import (
	request "waffle/internal/request"

	mock "github.com/stretchr/testify/mock"
)

// Mocknode is an autogenerated mock type for the node type
type Mocknode struct {
	mock.Mock
}

type Mocknode_Expecter struct {
	mock *mock.Mock
}

func (_m *Mocknode) EXPECT() *Mocknode_Expecter {
	return &Mocknode_Expecter{mock: &_m.Mock}
}

// Eval provides a mock function with given fields: r
func (_m *Mocknode) Eval(r request.Wrapper) bool {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for Eval")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(request.Wrapper) bool); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Mocknode_Eval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Eval'
type Mocknode_Eval_Call struct {
	*mock.Call
}

// Eval is a helper method to define mock.On call
//   - r request.Wrapper
func (_e *Mocknode_Expecter) Eval(r interface{}) *Mocknode_Eval_Call {
	return &Mocknode_Eval_Call{Call: _e.mock.On("Eval", r)}
}

func (_c *Mocknode_Eval_Call) Run(run func(r request.Wrapper)) *Mocknode_Eval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(request.Wrapper))
	})
	return _c
}

func (_c *Mocknode_Eval_Call) Return(_a0 bool) *Mocknode_Eval_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mocknode_Eval_Call) RunAndReturn(run func(request.Wrapper) bool) *Mocknode_Eval_Call {
	_c.Call.Return(run)
	return _c
}

// NewMocknode creates a new instance of Mocknode. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocknode(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mocknode {
	mock := &Mocknode{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
