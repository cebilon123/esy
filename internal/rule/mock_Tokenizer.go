// Code generated by mockery v2.42.1. DO NOT EDIT.

package rule

import mock "github.com/stretchr/testify/mock"

// MockTokenizer is an autogenerated mock type for the Tokenizer type
type MockTokenizer struct {
	mock.Mock
}

type MockTokenizer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenizer) EXPECT() *MockTokenizer_Expecter {
	return &MockTokenizer_Expecter{mock: &_m.Mock}
}

// BuildExpressionTree provides a mock function with given fields: variable, expression
func (_m *MockTokenizer) BuildExpressionTree(variable string, expression string) (expressionTree, error) {
	ret := _m.Called(variable, expression)

	if len(ret) == 0 {
		panic("no return value specified for BuildExpressionTree")
	}

	var r0 expressionTree
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (expressionTree, error)); ok {
		return rf(variable, expression)
	}
	if rf, ok := ret.Get(0).(func(string, string) expressionTree); ok {
		r0 = rf(variable, expression)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(expressionTree)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(variable, expression)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenizer_BuildExpressionTree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildExpressionTree'
type MockTokenizer_BuildExpressionTree_Call struct {
	*mock.Call
}

// BuildExpressionTree is a helper method to define mock.On call
//   - variable string
//   - expression string
func (_e *MockTokenizer_Expecter) BuildExpressionTree(variable interface{}, expression interface{}) *MockTokenizer_BuildExpressionTree_Call {
	return &MockTokenizer_BuildExpressionTree_Call{Call: _e.mock.On("BuildExpressionTree", variable, expression)}
}

func (_c *MockTokenizer_BuildExpressionTree_Call) Run(run func(variable string, expression string)) *MockTokenizer_BuildExpressionTree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockTokenizer_BuildExpressionTree_Call) Return(_a0 expressionTree, _a1 error) *MockTokenizer_BuildExpressionTree_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenizer_BuildExpressionTree_Call) RunAndReturn(run func(string, string) (expressionTree, error)) *MockTokenizer_BuildExpressionTree_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokenizer creates a new instance of MockTokenizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenizer {
	mock := &MockTokenizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
